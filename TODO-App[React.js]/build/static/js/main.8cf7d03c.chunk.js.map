{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","List","className","ListItem","ListItemAvatar","Avatar","ListItemText","primary","todo","secondary","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","console","log","docs","map","doc","data","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","variant","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kWAiBeA,MAdf,SAAcC,GACZ,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,cAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,OAGJ,kBAACC,EAAA,EAAD,CAAcC,QAASP,EAAMQ,KAAMC,UAAU,uB,iBCI/CC,EAFcC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKIC,YCiDRC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KA2Bb,OArBAC,qBAAU,WAERlB,EAAGmB,WAAW,SAASC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DC,QAAQC,IAAIF,EAASG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,WACzCb,EAASO,EAASG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAO9B,cAE9C,IAgBD,yBAAKN,UAAU,OACb,qFACF,8BACE,kBAACqC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CACEC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAWjB,EAASiB,EAAMC,OAAOH,WAG/C,kBAACI,EAAA,EAAD,CACEC,UAAWrB,EACXsB,QAAQ,YACRC,MAAM,UACNC,KAAK,SACLC,QA3BU,SAACP,GAEfA,EAAMQ,iBAEN1C,EAAGmB,WAAW,SAASwB,IAAI,CACzB7C,KAAMkB,EACN4B,UAAW3C,IAASU,UAAUkC,WAAWC,oBAE3C7B,EAAS,MAcP,aAUA,4BACGH,EAAMY,KAAI,SAAC5B,GAAD,OACV,kBAAC,EAAD,CAAMA,KAAMA,UC7CDiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.8cf7d03c.chunk.js","sourcesContent":["import React from \"react\"\nimport './Todo.css'\nimport {ListItemText,ListItem, List, ListItemAvatar, Avatar} from \"@material-ui/core\"\nfunction Todo(props) {\n  return ( \n    <List className=\"todo__list\">\n    <ListItem>\n        <ListItemAvatar>\n            <Avatar> \n            </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={props.todo} secondary=\"Deadline ⏰\" />\n    </ListItem>\n    </List> \n  );\n}\n\nexport default Todo;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAP9tZldDKWOdEKaBiF9DkYD7ehMAm8X30\",\n    authDomain: \"todo-app-925d1.firebaseapp.com\",\n    databaseURL: \"https://todo-app-925d1.firebaseio.com\",\n    projectId: \"todo-app-925d1\",\n    storageBucket: \"todo-app-925d1.appspot.com\",\n    messagingSenderId: \"427406109842\",\n    appId: \"1:427406109842:web:119d2f34e321a72a31ca4b\",\n    measurementId: \"G-RVX5TC8B3C\"\n  }\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\n\nconst db = firebaseApp.firestore()\n\nexport  {db}","import React, { useState, useEffect } from \"react\"\nimport \"./App.css\"\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\"\nimport Todo from './Todo'\nimport {db} from './firebase'\nimport firebase from \"firebase\"\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // when the app loads, we need to list to the database and fetch new todos as they get added/removed\n\n  useEffect(function() {\n    // This code here... fires when the app.js loads \n    db.collection(\"todos\").orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      console.log(snapshot.docs.map(doc => doc.data()))\n      setTodos(snapshot.docs.map(doc => doc.data().todo))\n    }) \n  }, [])\n\n\n\n  const addTodo = (event) => {\n    //This will fire off when we click the button\n    event.preventDefault();\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Hello World🔥! This Adibe here🚀 </h1>\n    <form>\n      <FormControl>\n        <InputLabel>Write a Todo</InputLabel>\n        <Input\n          value={input}\n          onChange={(event) => setInput(event.target.value)}\n        />\n      </FormControl>\n      <Button\n        disabled={!input}\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        onClick={addTodo}\n      >\n        Add Todo\n      </Button>\n      </form>\n      <ul>\n        {todos.map((todo) => (\n         <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App\n\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}